//=======================================================================
//@V@:Note: This file generated by vgen V1.02 (02:00:29 AM 17 May 1998).
//	vbbbikeapp.cpp:	Source for vbbbikeApp class
//=======================================================================

#include "vbbbikeapp.h"		// Header file

//=========================>>> vbbbikeApp::vbbbikeApp <<<==========================
  vbbbikeApp::vbbbikeApp(char* name, int sdi, int h, int w) : vApp(name, sdi, h, w)
  {
    // Constructor

   _vbbbikeCmdWin = 0;
   strCount = 0;
   str = NULL;
   waitForGoal = false; // waitForStart
   route = NULL;
  }

//=========================>>> vbbbikeApp::vbbbikeApp <<<==========================
  vbbbikeApp::~vbbbikeApp()
  {
    // Destructor
    // XXX free Strassen-objects
  }

//=====================>>> vbbbikeApp::NewAppWin <<<==========================
  vWindow* vbbbikeApp::NewAppWin(vWindow* win, char* name,
    int w, int h, vAppWinInfo* winInfo)
  {
    vAppWinInfo* awinfo = winInfo;
    char *appname = name;

    if (!*name)
      {
	 appname = "vBBBike";		// Default name
      }
	
    UserDebug1(Build,"vbbbikeApp::NewAppWin(%s)\n",appname);

    // Create the first window using provided CmdWindow

    _vbbbikeCmdWin = (vbbbikeCmdWindow*) win;
    if (!_vbbbikeCmdWin)
      {
	_vbbbikeCmdWin = new vbbbikeCmdWindow(appname, w, h);
      }

    if (!awinfo)
	awinfo = new vAppWinInfo(appname);

    return vApp::NewAppWin(_vbbbikeCmdWin, appname, w, h, awinfo);
  }

//============================>>> vbbbikeApp::Exit <<<===========================
  void vbbbikeApp::Exit(void)
  {
    // This is called to close all windows.

    UserDebug(Build,"vbbbikeApp::Exit()\n");

    vApp::Exit();		// Default behavior
  }

//======================>>> vbbbikeApp::CloseAppWin <<<===========================
#if V_VersMajor == 1 && V_VersMinor <= 19
  void vbbbikeApp::CloseAppWin(vWindow* win)
#else
  int vbbbikeApp::CloseAppWin(vWindow* win)
#endif
  {
    // This will be called BEFORE a window has been unregistered or
    // closed.  Default behavior: unregister and close the window.

    UserDebug(Build,"vbbbikeApp::CloseAppWin()\n");

#if V_VersMajor > 1 || V_VersMinor > 19
    return
#endif
      vApp::CloseAppWin(win);
  }

//=====================>>> vbbbikeApp::AppCommand <<<==============================
  void vbbbikeApp::AppCommand(vWindow* win, ItemVal id, ItemVal val, CmdType cType)
  {
    // Commands not processed by the window will be passed here

    UserDebug1(Build,"vbbbikeApp::AppCmd(ID: %d)\n",id);
    vApp::AppCommand(win, id, val, cType);
  }

//=========================>>> vbbbikeApp::KeyIn <<<==============================
  void vbbbikeApp::KeyIn(vWindow* win, vKey key, unsigned int shift)
  {
    // Key strokes not processed by the window will be passed here

    vApp::KeyIn(win, key, shift);
  }

//###########################################################################

  static vbbbikeApp vbbbike_App("vBBBike");	// The instance of the app

//============================>>> AppMain <<<==============================
  int AppMain(int argc, char** argv)
  {
    // Use AppMain to create the main window

    vbbbike_App.str =
      (Strassen**)malloc((argc < 2 ? 1 : (argc-1))*sizeof(Strassen*));
    if (vbbbike_App.str == NULL) {
      fprintf(stderr, "Cannot allocate memory\n");
      exit(9);
    }

#ifdef __CYGWIN__
    if (str_buf == NULL)
	str_buf = &str_buf_data[0];
    if (netz_buf == NULL)
	netz_buf = &netz_buf_data[0];
#endif

    if (argc < 2) {
      vbbbike_App.str[0] = new MemStrassen(); //"../../data/strassen");
      vbbbike_App.strCount++;
    } else {
      for(int i = 1; i < argc; i++) {
	vbbbike_App.str[vbbbike_App.strCount] = new Strassen(argv[i]);
	vbbbike_App.strCount++;
      }
    }

    (void) theApp->NewAppWin(0, "vBBBike", 800, 600);

    return 0;
  }
