#!/usr/bin/perl -w
# -*- perl -*-

#
# $Id: check_neighbour,v 1.12 2003/08/14 22:31:14 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 1998 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Mail: eserte@cs.tu-berlin.de
# WWW:  http://user.cs.tu-berlin.de/~eserte/
#

package BBBike::check_neighbour;

use strict;
use Getopt::Long;
use FindBin;
use lib ("$FindBin::RealBin/..", "$FindBin::RealBin/../lib");
use Strassen;
eval 'use BBBikeXS';
use Karte;
use vars qw($net);


sub doit {
    local(@ARGV) = @_;

    my $datatype = "standard";
    my $datafile = "radwege_exact";
    my @against = ();
    my $origmap = "Berlinmap1996";
    my $keep_net = 0;

    GetOptions("data=s"     => \$datafile,
	       "type=s"     => \$datatype,
	       "against=s@" => \@against,
	       "origmap=s"  => \$origmap,
	       "keepnet!"   => \$keep_net,
	      )
	or die "usage. $0 [-data datafile] [-type datatype] [-against file ...] [-origmap map] [-[no]keepnet]
";

    if (!@against) {
	@against = "strassen";
    }

    local @Strassen::datadirs = @Strassen::datadirs;
    unshift @Strassen::datadirs, "$FindBin::RealBin/../data";

    Karte::preload($origmap);
    my $to   = $Karte::map_by_modname{$origmap};

    my $str;
    if (@against == 1) {
	$str = new Strassen $against[0];
    } else {
	$str = new MultiStrassen @against;
    }

    if (!$net || !$keep_net) {
	$net = new StrassenNetz $str;
	$net->make_net;
    }

    my $err;

    if ($datatype =~ /radweg/i) { # this type is obsolete...
	open(D, $datafile) or die $!;
	while(<D>) {
	    next if /^\s*\#/;
	    chomp;
	    my(@l) = split(/\s+/);
	    if (!exists $net->{Net}{$l[0]}{$l[1]} and
		!exists $net->{Net}{$l[1]}{$l[0]}) {
		my $orig0 = join(",", map {int} $to->standard2map(split /,/, $l[0]));
		my $orig1 = join(",", map {int} $to->standard2map(split /,/, $l[1]));
		warn "Not neighbours in $datafile: $l[0] and $l[1] (orig coords: $orig0 and $orig1)";
		$err++;
	    }
	}
	close D;
    } else {
	my $d = new Strassen $datafile;
	die if !$d;
	$d->init;
	while(1) {
	    my $ret = $d->next;
	    my @coord = @{$ret->[1]};
	    last if !@coord;
	    next if @coord < 2;
	    for(my $i = 0; $i < $#coord; $i++) {
		next if ($coord[$i]   !~ /^[-+\d]/ ||
			 $coord[$i+1] !~ /^[-+\d]/); # XXX andere Coord-Systeme NYI
		if (!exists $net->{Net}{$coord[$i]}{$coord[$i+1]} and
		    !exists $net->{Net}{$coord[$i+1]}{$coord[$i]}) {
		    my $orig0 = join(",", map {int} $to->standard2map(split /,/, $coord[$i]));
		    my $orig1 = join(",", map {int} $to->standard2map(split /,/, $coord[$i+1]));
		    warn "Neighbours? $coord[$i];$coord[$i+1] (line @{[ $d->pos+1]}, orig: $orig0;$orig1)\n";
		    $err++;
		}
	    }
	}
    }

    die if $err;

    1;
}

return 1 if caller;

doit(@ARGV);

__END__
