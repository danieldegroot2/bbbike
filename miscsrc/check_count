#!/usr/bin/env perl
# -*- perl -*-

#
# $Id: check_count,v 1.1 2002/01/08 22:13:04 eserte Exp $
# Author: Slaven Rezic
#
# Copyright (C) 2001 Slaven Rezic. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#

use strict;

use Getopt::Long;
use FindBin;
use lib ("$FindBin::RealBin/..", "$FindBin::RealBin/../lib");
use Strassen;

unshift(@Strassen::datadirs, "$FindBin::RealBin/../data");

my $datatype;
my $datafile;
my @err;

my %cat_to_nr_of_points =
    ('P1' => 3,
     'P2' => 3,
     '0'  => 1,
     'BNP' => 1,
    );
my %cat_to_min_nr_of_points =
    ('3' => 3,
    );

GetOptions("data=s"     => \$datafile,
	   "type=s"     => \$datatype,
	  );
if (!$datafile) {
    die "-data option missing";
}

my $s = new Strassen $datafile;
$s->init;
while(1) {
    my $r = $s->next;
    last if !@{ $r->[Strassen::COORDS] };
    if (defined $datatype) {
	if ($datatype eq 'vorfahrt') {
	    if (scalar @{$r->[Strassen::COORDS]} != 3) {
		push @err, "vorfahrt file must have exact 3 points (pos @{[ $s->pos ]})";
	    }
	}
    } else {
	my($cat) = split /:/, $r->[Strassen::CAT];
	if (exists $cat_to_nr_of_points{$cat} &&
	    $cat_to_nr_of_points{$cat} != scalar @{$r->[Strassen::COORDS]}) {
	    push @err, "Category $cat expects $cat_to_nr_of_points{$cat} points (pos @{[ $s->pos ]})";
	} elsif (exists $cat_to_min_nr_of_points{$cat} &&
		 $cat_to_min_nr_of_points{$cat} < scalar @{$r->[Strassen::COORDS]}) {
	    push @err, "Category $cat expects min. $cat_to_nr_of_points{$cat} points (pos @{[ $s->pos ]})";
	}
    }
}

if (@err) {
    die join("\n", @err), "\n";
}

__END__
